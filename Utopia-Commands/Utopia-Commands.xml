<!--
  ~ Copyright (c) 2012, Fredrik Yttergren
  ~ All rights reserved.
  ~
  ~ Redistribution and use in source and binary forms, with or without
  ~ modification, are permitted provided that the following conditions are met:
  ~     * Redistributions of source code must retain the above copyright
  ~       notice, this list of conditions and the following disclaimer.
  ~     * Redistributions in binary form must reproduce the above copyright
  ~       notice, this list of conditions and the following disclaimer in the
  ~       documentation and/or other materials provided with the distribution.
  ~     * Neither the name LucidBot nor the
  ~       names of its contributors may be used to endorse or promote products
  ~       derived from this software without specific prior written permission.
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ~ ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  ~ WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  ~ DISCLAIMED. IN NO EVENT SHALL Fredrik Yttergren BE LIABLE FOR ANY
  ~ DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  ~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  ~ LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ~ ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  ~ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  ~ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="Utopia-Commands" default="build">
    <property name="src.dir" location="../Utopia-Commands/src"/>
    <property name="build.dir" location="out/build"/>
    <property name="classes.dir" location="${build.dir}/Utopia-Commands/classes"/>
    <property name="dist.dir" location="${build.dir}/dist"/>
    <property name="compile-lib.dir" location="${build.dir}/Utopia-Commands/lib/compile"/>
    <property name="runtime-lib.dir" location="${build.dir}/Utopia-Commands/lib/runtime"/>
    <property name="jar.path" location="${dist.dir}/plugins/utopia-commands.jar"/>
    <property name="shared-lib.dir" location="${build.dir}/lib"/>
    <property name="lib.dir" location="${dist.dir}/lib"/>

    <target name="makedir">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${compile-lib.dir}"/>
        <mkdir dir="${runtime-lib.dir}"/>
        <mkdir dir="${dist.dir}/plugins"/>
    </target>

    <target name="resolve" depends="makedir">
        <ivy:configure/>
        <ivy:resolve file="../Utopia-Commands/ivy.xml" conf="compile, runtime"/>
    </target>

    <target name="retrieve" depends="resolve">
        <ivy:retrieve pattern="${compile-lib.dir}/[artifact]-[revision].[ext]" conf="compile"/>
        <ivy:retrieve pattern="${runtime-lib.dir}/[artifact]-[revision].[ext]" conf="runtime"/>
    </target>

    <target name="copy">
        <mkdir dir="${dist.dir}/scripts"/>
        <!--<copy todir="${dist.dir}/scripts" flatten="true">
            <fileset dir="../Utopia-Commands/scripts"/>
        </copy> -->
        <mkdir dir="${dist.dir}/templates"/>
        <copy todir="${dist.dir}/templates" flatten="true">
            <fileset dir="../Utopia-Commands/templates"/>
        </copy>
        <!--<copy file="../Utopia-Commands/utopia.properties" todir="${dist.dir}" flatten="true"/>-->
    </target>

    <path id="compile.classpath">
        <fileset dir="${compile-lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${runtime-lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${shared-lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dist.dir}">
            <include name="LucidBot.jar"/>
        </fileset>
        <fileset dir="${dist.dir}/plugins">
            <include name="utopia-api.jar"/>
        </fileset>
    </path>

    <path id="build.classpath">
        <fileset dir="${runtime-lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="compile" depends="retrieve, copy">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="compile.classpath" debug="true"/>
    </target>

    <target name="build" depends="compile">
        <copy todir="${lib.dir}" flatten="true">
            <fileset dir="${runtime-lib.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <pathconvert property="manifest.classpath" pathsep=" ">
            <path refid="build.classpath"/>
            <mapper>
                <chainedmapper>
                    <flattenmapper/>
                </chainedmapper>
            </mapper>
        </pathconvert>
        <jar destfile="${jar.path}" basedir="${classes.dir}" flattenattributes="true">
            <zipfileset dir="../Utopia-Commands/META-INF" prefix="META-INF"/>
            <manifest>
                <attribute name="Class-Path" value="${manifest.classpath}"/>
            </manifest>
        </jar>
    </target>

</project>