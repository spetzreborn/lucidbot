#
# A comma-separated list of IPs that the setup UI will be available from.
# Add a range by simply starring out numbers. For example "10.*.*.*" allows all IP's from 10.0.0.0-10.255.255.255
# This is not designed to be high security in any way, and it's preferable to specify IP's exactly when possible,
# or even access the setup UI through remote desktop or something (only allowing 127.0.0.1 or whatever).
#
Setup.Allowed.IPs=127.0.0.1, 192.168.*.*

#
# The host of the database. Examples:
# Local MySQL: 127.0.0.1
# Embedded db: embedded
#
Core.Database.Host=

#
# The name of the database
#
Core.Database.Name=

#
# The username for connecting to the database. If you're using the embedded, you may choose
# whatever name you want (as long as you keep using the same after installation). With MySQL you need
# to use whatever accounts is setup for it (for example root)
#
Core.Database.User=

#
# The password to the database. Use whatever you want for the embedded, or whatever password was set for the account
# you're using for MySQL.
#
Core.Database.Password=

#
# The port the bot will run it's web server on. The web server is used for everything from hosting the installation
# web UI to the web services.
#
Core.WebServer.Port=49998

#
# The email server the bot can use to send emails (and email-to-sms, which is also emails)
#
#Core.Email.Host=smtp.gmail.com

#
# The port to connect to the email server through
#
#Core.Email.Port=587

#
# Whether to use TLS (a security protocol) for connecting to the email server
#
#Core.Email.UseTLS=true

#
# The username to use for the email server
#
#Core.Email.Username=something@gmail.com

#
# The password to use for the email server
#
#Core.Email.Password=somepassword

#
# The IRC server to connect to
#
Core.IRC.Server=irc.utonet.org

#
# The port to connect to IRC through
#
Core.IRC.Port=6667

#
# The password required to connect to the server (if any. It's not very common)
#
#Core.IRC.ServerPassword=

#
# The message to NickServ used to check if the user is properly identified and therefore may be authenticated
# 2 different placeholders are used to indicate how to construct the message:
# 1. $SINGLE_USER$ => used when the message in question only supports specifying a single user each time
# 2. $MULTI_USERS:X$ => used when multiple users are supported in a single command. The number X specifies how many
# can be sent in each message.
#
# Examples:
# 1. GlobalGamers supports this: USERINFO $SINGLE_USER$
# 2. Utonet supports this: STATUS $MULTI_USERS:16$
IRC.Authentication.Request=STATUS $MULTI_USERS:16$

#
# The message NickServ sends in response to an authentication request.
# 2 different placeholders are used to indicate how to construct the message:
# 1. $STATUS_NUMBER$ => used for servers that respond with a status code. What code is deemed "fully identified" is specified
# by the property IRC.StatusReply.Identified below
# 2. $ACCOUNT$ => used when the server responds with what account the user is identified with
#
# IMPORTANT NOTE: also required is another placeholder, $CURRENT_NICK$, which tells the bot what the user's current nick is,
# so it knows who to actually authenticate
#
# Examples:
# 1. GlobalGamers responds with this: $CURRENT_NICK$ is authenticated to account $ACCOUNT$.
# 2. Utonet responds with this: STATUS $CURRENT_NICK$ $STATUS_NUMBER$
IRC.Authentication.Response=STATUS $CURRENT_NICK$ $STATUS_NUMBER$

#
# What the invite command looks like for the server's chanserv version (some servers have weird ones).
# The channel is denoted by the variable $CHANNEL$
#
IRC.CSInvite.Request=INVITE $CHANNEL$

#
# Which number NickServ uses in it's replies to the STATUS command to signify that the user is identified
#
IRC.StatusReply.Identified=3

#
# The default priority to give irc messages that have no explicit priority set to them
#
IRC.Message.DefaultPriority=5

#
# The max length of a message to the IRC server
#
IRC.Message.MaxLineLength=350

#
# The strategy to use for handling anti-flooding on the IRC server. You select it either by specifying the name or the id of
# the strategy you want to use.
# The current options are:
# * Name: Buffer, Id: 1 -- Limits the amount of bytes to send per second (suitable for Utonet)
# * Name: Constant, Id: 2 -- Adds a constant delay between each message
# * Name: None, Id: 3 -- Adds no delay whatsoever
#
IRC.DelayStrategy=2

#
# The amount of millis to wait between each message if the constant delay strategy is active
#
IRC.Delay.Millis=750

#
# Whether to automatically connect to IRC when the bot starts
#
Core.AutoConnect.OnStartup=false

#
# Whether to automatically reconnect when the bot is disconnected from IRC
#
Core.AutoConnect.OnDisconnect=true

#
# How many auto-connect attempts to make
#
Core.AutoConnect.Attempts=500

#
# How many seconds to wait between each auto-connect attempt
#
Core.AutoConnect.AttemptDelay=75

#
# The prefix for bot commands
#
Commands.Prefix=!

#
# A command that will be automatically called on user login, as if the user called the command in a pm right after joining. The command prefix
# needs to be included. If you want several commands to be executed, create an alias with those commands and put the alias in here.
#
Commands.OnLoginCall=!orders

#
# Whether users are allowed to register on their own, or have to be added to the bot by an admin
#
Users.AllowRegistration=true

#
# Whether users are allowed to access services with the default password. If this is set to false, the user has to change
# password before it's actually useful for anything
#
Users.DefaultPassword.AccessEnabled=false

#
# The tool tip for the tray icon, useful for people running multiple bots
#
Core.TrayIcon.ToolTip=LucidBot